version: "3.9"

services:
  db_a:
    image: postgres:17
    container_name: postgres_a
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_A_DB}
      - POSTGRES_USER=${POSTGRES_A_USER}
      - POSTGRES_PASSWORD=${POSTGRES_A_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - db_a_data:/var/lib/postgresql/data
    networks:
      - internal-network-testing

  db_b:
    image: postgres:17
    container_name: postgres_b
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_B_DB}
      - POSTGRES_USER=${POSTGRES_B_USER}
      - POSTGRES_PASSWORD=${POSTGRES_B_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - db_b_data:/var/lib/postgresql/data
    networks:
      - internal-network-testing

  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - internal-network-testing

  golang_demo_app:
    image: golang-demo-app
    container_name: golang-demo-app
    restart: unless-stopped
    depends_on:
      - db_a
      - db_b
    environment: #idk this env work or not lmao
      - SERVER_PORT=${SERVER_PORT}
      - DATABASE_URL_A=${DATABASE_URL_A}
      - DATABASE_URL_B=${DATABASE_URL_B}
    ports:
      - "${SERVER_PORT}:8080"
    networks:
      - internal-network-testing

volumes:
  db_a_data:
  db_b_data:
  pgadmin_data:

networks:
  internal-network-testing:
    external: true

